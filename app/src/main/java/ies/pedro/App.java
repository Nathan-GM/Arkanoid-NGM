/*
 * This source file was generated by the Gradle 'init' task
 */
package ies.pedro;

import ies.pedro.components.*;
import ies.pedro.components.Block;
import ies.pedro.model.*;
import ies.pedro.utils.Size;
import ies.pedro.utils.XMLtoHTML;
import jakarta.xml.bind.JAXBException;

import java.io.File;
import java.io.IOException;

import java.security.Principal;

import java.util.ArrayList;
import java.util.Optional;

import java.util.logging.Logger;

import javafx.application.Application;
import javafx.application.Platform;


import javafx.geometry.Point2D;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;


import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;

import javafx.scene.control.SeparatorMenuItem;
import javafx.scene.image.Image;
import javafx.scene.layout.BorderPane;

import javafx.scene.layout.Pane;

import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

public class App extends Application {


    Scene scene;
    public static int SCALE = 3;
    public static int CELLWIDTH = 16;
    public static int CELLHEIGHT = 8;
    private final int width = 224 * SCALE;
    private final int height = 240 * SCALE;
    private final int ROWS = 29;
    private final int COLUMNS = 13;

    final FileChooser fileChooser;
    private EditorCanvas editor;
    private MediaPlayer mp;
    private LevelsPanel levelsPanel;
    private Level level;
    private Levels levels;


        public App() {
            super();
            this.level = new Level();
            fileChooser = new FileChooser();
            this.levels = new Levels();
        }


    @Override
    public void start(Stage stage) {
        BorderPane border = new BorderPane();
        border.setCenter(this.createEditor());
        border.setLeft(this.createBlockMenu());
        border.setRight(this.levelsPanel=this.createLevelPanel());
        border.setTop(this.createMenu());
        this.scene = new Scene(border, this.width + 330, this.height + 50);
        stage.setTitle("Arkanoid Level Editor");
        stage.getIcons().add(new Image(String.valueOf(App.class.getResource("/icono.png"))));
        stage.setResizable(false);
        stage.setScene(scene);
        //para que cierre al pulsar el icono
        stage.setOnCloseRequest(t -> {
            Platform.exit();
            System.exit(0);
        });

        stage.show();
        this.editor.draw();
    }

    /**
     * Crea el panel lateral de bloques
     *

     */
    private Pane createBlockMenu() {
        BlocksPanel b = new BlocksPanel();
        Block tb;
        String[] nombres = Block.getNamesBlocks();
        for (String nombre : nombres) {
            tb = new Block();
            tb.setTipo(nombre);
            b.addBlock(tb);
            tb.addBlocklistener(this.editor);
        }
        b.init();
        return b;
    }

    /**
     * crea el editor de nivels
     *

     */
    private EditorCanvas createEditor() {
        this.editor = new EditorCanvas();
        this.editor.setBoard_size(new Size(this.width, this.height));
        //por los bordes da 29 filas y 13 columnas
        this.editor.setRows(ROWS);
        //por los bordes
        this.editor.setCols(COLUMNS);
        this.editor.init();
        return this.editor;
    }

    /**
     * crea el panel de niveles, con lista de niveles, botones administración y música
     *
     */
    private LevelsPanel createLevelPanel() {
        LevelsPanel levelspanel = new LevelsPanel();
        levelspanel.init();
        levelspanel.setOnadd((s) -> {
            this.level = new Level(s);
            this.levels.addLevel(this.level);
            this.editor.setLevel(level);
            this.deleteMediaplayer();
        });
        levelspanel.setOndelete((s) -> {
            this.deleteMediaplayer();
            this.level=null;
            this.levels.deleteLevel(s);
            this.editor.setLevel(null);
        });
        levelspanel.setOnseleted((s) -> {

            this.deleteMediaplayer();
            this.level = this.levels.changeLevel(s);
            this.editor.setLevel(this.level);
            System.out.println("Se ha cambiado de nivel");
        });

        levelspanel.setOnreset(s ->
        {
            if(this.editor.getLevel()!=null) {
                this.level.reset();
                //this.editor.getLevel().reset();
                this.editor.setRepaintbackground(true);
                this.editor.draw();
                this.deleteMediaplayer();
            }

        });
        levelspanel.setOnplay(() -> {
            if (this.editor.getLevel() != null) {
                //si es nulo y existe una cancion
                if ((this.mp == null && this.level.getSound() != null ) || (this.mp!=null && this.mp.getMedia().getSource()!= this.level.getSound())) {
                    this.mp = new MediaPlayer(new Media(new File(this.level.getSound().replace("\\", "//")).toURI().toString()));
                    this.mp.setCycleCount(MediaPlayer.INDEFINITE);
                }
                if (this.mp != null) {
                    this.mp.play();
                }
            }
        });
        levelspanel.setOnpause(() -> {
            if (this.level != null && this.mp != null) {
                this.mp.pause();
            }
        });

        levelspanel.setOnstop(() -> {
            if (this.level != null && this.mp != null) {
                this.mp.stop();
            }
        });
        return levelspanel;
    }

    private MenuBar createMenu() {
        MenuBar menuBar = new MenuBar();

        Menu fileMenu = new Menu("File");
        MenuItem newMenuItem = new MenuItem("New");
        newMenuItem.setOnAction(eh -> {
           this.level.reset();
           this.editor.reset();
           this.levelsPanel.reset();
        });
        MenuItem saveLevelMenuItem = new MenuItem("Save Level");
        saveLevelMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            File file = fileChooser.showSaveDialog(scene.getWindow());
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            if (file != null) {
                if (file.getName().endsWith(".xml") || file.getName().endsWith(".json")) {
                    Level.save(file, this.level);
                } else {
                    fileError();
                }
            } else {
                fileError();
            }
        });
        MenuItem loadLevelMenuItem = new MenuItem("Load Level");
        loadLevelMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml*"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            File file = fileChooser.showOpenDialog(scene.getWindow());

            if (file != null) {
                if (Level.load(file) != null) {
                    this.levelsPanel.reset();
                    this.level = Level.load(file);
                    this.editor.setLevel(this.level);
                    this.levelsPanel.getListlevels().getItems().add(this.level.getName());
                } else {
                    Alert alert = new Alert(AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("Fallo al cargar");
                    alert.setContentText("El fichero no contiene datos de ningun nivel o estan dañados.");
                    alert.showAndWait();
                }
            } else {
                fileError();
            }

        });
        MenuItem saveMenuItem = new MenuItem("Save");
        saveMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            File file = fileChooser.showSaveDialog(scene.getWindow());
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            if (file != null) {
                if (file.getName().endsWith(".xml") || file.getName().endsWith(".json")) {
                    Levels.save(file, this.levels);
                } else {
                    fileError();
                }
            } else {
                fileError();
            }
        });
        MenuItem loadMenuItem = new MenuItem("Load");
        loadMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml*"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            File file = fileChooser.showOpenDialog(scene.getWindow());
            if (file != null) {
                if (Levels.load(file) != null) {
                    this.levels = Levels.load(file);
                    this.level = this.levels.getListaLevels().get(0);
                    this.editor.setLevel(this.level);
                    for (int i = 0; i < this.levels.getListaLevels().size(); i++) {
                        this.levelsPanel.getListlevels().getItems().add(this.levels.getListaLevels().get(i).getName());
                    }
                } else {
                    Alert alert = new Alert(AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("Fallo al cargar");
                    alert.setContentText("El fichero no contiene datos de ningun nivel o estan dañados.");
                    alert.showAndWait();
                }
            }else {
                fileError();
            }


        });
        Menu optionsMenu = new Menu("Options");
        MenuItem soundMenu = new MenuItem("Sound");
        optionsMenu.getItems().add(soundMenu);
        soundMenu.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("mp3", "*.mp3*")

            );
            File file = fileChooser.showOpenDialog(scene.getWindow());
            if (file != null) {
                this.level.setSound(file.getAbsolutePath());
                this.editor.getLevel().setSound(file.getAbsolutePath());
            }

        });
        MenuItem backgroundMenu = new MenuItem("Background");
        optionsMenu.getItems().add(backgroundMenu);
        backgroundMenu.setOnAction(actionEvent -> {
            DialogBackground db = new DialogBackground();
            db.init();
            Optional<Point2D> result = db.showAndWait();
            if (result.isPresent()) {
                result.get();
                if (this.editor.getLevel() != null) {

                    this.editor.getLevel().setBackgroundPosition(result.get());
                    this.editor.setRepaintbackground(true);
                    this.editor.draw();
                }
            }
        });


        MenuItem timeMenu = new MenuItem("Time");
        timeMenu.setOnAction(eh -> {
            DialogTime dt = new DialogTime();
            dt.init();
            Optional<Double> result = dt.showAndWait();
            if (result.isPresent()) {
                result.get();
                if (this.editor.getLevel() != null) {
                    this.editor.getLevel().setTime(result.get());
                }
            }


        });

        MenuItem xmlToHMTLLevelMenuItem = new MenuItem("Level XMLToHTML");
        xmlToHMTLLevelMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml*"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            File file = fileChooser.showOpenDialog(scene.getWindow());
            if (file != null) {
                XMLtoHTML.leveltoHTML(file);
            } else {
                fileError();
            }
        });
        MenuItem xmlToHMTLLevelsMenuItem = new MenuItem("Levels XMLToHTML");
        xmlToHMTLLevelsMenuItem.setOnAction(actionEvent -> {
            final FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("XML", "*.xml*"),
                    new FileChooser.ExtensionFilter("Json", "*.json"),
                    new FileChooser.ExtensionFilter("Bin", "*.bin")
            );
            File file = fileChooser.showOpenDialog(scene.getWindow());
            if (file != null) {
                XMLtoHTML.levelstoHTML(file);
            } else {
                fileError();
            }

        });
        optionsMenu.getItems().add(timeMenu);

        MenuItem exitMenuItem = new MenuItem("Salir");
        exitMenuItem.setOnAction(actionEvent -> Platform.exit());

        fileMenu.getItems().addAll(newMenuItem,saveLevelMenuItem, saveMenuItem, loadLevelMenuItem, loadMenuItem, xmlToHMTLLevelMenuItem, xmlToHMTLLevelsMenuItem,
                new SeparatorMenuItem(), exitMenuItem);

        menuBar.getMenus().addAll(fileMenu, optionsMenu);//, webMenu, sqlMenu);
        return menuBar;
    }

    private void deleteMediaplayer() {
        if (this.mp != null) {
            this.mp.stop();
            this.mp = null;
        }
    }

    private void fileError() {
        Alert alert = new Alert(AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText("Fallo al cargar");
        alert.setContentText("Se ha de seleccionar un fichero con las extensiones JSON o XML.");
        alert.showAndWait();
    }
}
